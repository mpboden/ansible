#!/usr/bin/env bash
#export COLOR_THEME=Solarized_Dark;

color256=false
color_prompt=false

# if COLOR_THEME is set
if [ ! -z ${COLOR_THEME+x} ]; then
	if [ "$TERM" = xterm ] && infocmp xterm >/dev/null 2>&1; then
		color_prompt=yes
	elif [ "$TERM" = xterm-256color ] && infocmp xterm-256color >/dev/null 2>&1; then
		color256=true
		color_prompt=yes
	fi;
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn't a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}
if [ "$color_prompt" = yes ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null && $color256; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		
		tput sgr0; # reset colors
		bold=$(tput bold);
		default=$(tput op);
		reset=$(tput sgr0);
		# Solarized colors, taken from http://git.io/solarized-colors.
		black=$(tput setaf 0);
		blue=$(tput setaf 33);
		cyan=$(tput setaf 37);
		green=$(tput setaf 64);
		orange=$(tput setaf 166);
		magenta=$(tput setaf 125);
		red=$(tput setaf 124);
		violet=$(tput setaf 61);
		white=$(tput setaf 15);
		yellow=$(tput setaf 136);
	else
		bold="\e[1m";
		default="\e[0;39m";
		reset="\e[0m";
		black="\e[0;30m";		# ANSI Black 				Solarized base02 	RGB   7  54  66
		blue="\e[0;34m";		# ANSI Blue					Solarized blue		RGB  38 139 210
		cyan="\e[0;36m";		# ANSI Cyan					Solarized cyan		RGB  42 161 152
		green="\e[0;32m";		# ANSI Green 				Solarized green 	RGB 133 153   0
		orange="\e[1;31m";	# ANSI Red Bold 		Solarized orange 	RGB 203  75  22 
		red="\e[0;31m";			# ANSI Red 					Solarized red			RGB 220  50  47
		magenta="\e[0;35m";	# ANSI Magenta			Solarized magenta	RGB 211  54 130
		violet="\e[1;35m";	# ANSI Magenta Bold	Solarized magenta	RGB 108 113 196
		yellow="\e[0;33m";	# ANSI Yellow				Soaraized yellow 	RGB 181 137   0
		base00="\e[1;33m";	# ANSI Yellow Bold	Solarized base00 	RGB 101 123 131
		base01="\e[1;32m";	# ANSI Green Bold		Solarized base01 	RGB  88 110 117
		base0="\e[1;34m";		# ANSI Blue Bold		Solarized base0  	RGB 131 148 150
		base1="\e[1;36m";		# ANSI Cyan Bold		Solarized base1		RGB 147 161 161
		white="\e[0;37m";		# ANSI White				Solarized base2		RGB 238 232 213
		base3="\e[1;37m";		# ANSI White Bold		Solarized base3		RGB 253 246 227
	fi

	# Highlight the user name when logged in as root.
	if [[ "${USER}" == "root" ]]; then
		userStyle="${red}";
	else
		userStyle="${yellow}";
	fi;
	
	# Highlight the hostname when connected via SSH.
	if [[ "${SSH_TTY}" ]]; then
#		hostStyle="${bold}${red}";
		hostStyle="${red}";
	else
		hostStyle="${yellow}";
	fi;
	case $TERM in
		xterm*|rxvt*)
			# Set the terminal titlebar
			# working directory full path
			TITLE="\[\e]2;\u@\h: \w\007\]"
			;;
		*)
			TITLE=""
			;;
	esac

	PS1="${TITLE}";
	PS1+="\n";
	PS1+="[\$(date +%H%M)]"; 		# date
	PS1+="[";
	PS1+="\[${userStyle}\]\u"; 	# username
	PS1+="\[${default}\]@";
	PS1+="\[${hostStyle}\]\h"; 	# host
	PS1+="\[${default}\]: ";
	PS1+="\[${green}\]\W"; 			# working directory basename
	PS1+="\[${default}\]]";
	PS1+="\$(prompt_git '\[${default}\] on \[${blue}\]' '\[${magenta}\]')"; # git Prompt
	PS1+="\n";
	PS1+="\[${reset}\]\$ "; # (reset all attributes)
	export PS1;
	
	PS2="\[${yellow}\]->\[${reset}\]";
	export PS2;
else
	PS1="\n"; # newline
	PS1+="[\$(date +%H%M)]"; # date
	PS1+="[\u@\h:\W]\$ ";
	PS1+="\n";
	PS2="->";
fi

unset color_prompt TITLE userStyle hostStyle default bold reset black blue cyan green orange purple red violet white yellow
